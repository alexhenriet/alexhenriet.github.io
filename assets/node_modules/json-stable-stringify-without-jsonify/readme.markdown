<h1 id="json-stable-stringify">json-stable-stringify</h1>

<p>This is the same as https://github.com/substack/json-stable-stringify but it doesn't depend on libraries without licenses (jsonify).</p>

<p>deterministic version of <code>JSON.stringify()</code> so you can get a consistent hash
from stringified results</p>

<p>You can also pass in a custom comparison function.</p>

<p><a href="https://ci.testling.com/substack/json-stable-stringify"><img src="https://ci.testling.com/substack/json-stable-stringify.png" alt="browser support" /></a></p>

<p><a href="http://travis-ci.org/substack/json-stable-stringify"><img src="https://secure.travis-ci.org/substack/json-stable-stringify.png" alt="build status" /></a></p>

<h1 id="example">example</h1>

<pre><code class="js">var stringify = require('json-stable-stringify');
var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };
console.log(stringify(obj));
</code></pre>

<p>output:</p>

<pre><code>{"a":3,"b":[{"x":4,"y":5,"z":6},7],"c":8}
</code></pre>

<h1 id="methods">methods</h1>

<pre><code class="js">var stringify = require('json-stable-stringify')
</code></pre>

<h2 id="var-str-%3D-stringifyobj%2C-opts">var str = stringify(obj, opts)</h2>

<p>Return a deterministic stringified string <code>str</code> from the object <code>obj</code>.</p>

<h2 id="options">options</h2>

<h3 id="cmp">cmp</h3>

<p>If <code>opts</code> is given, you can supply an <code>opts.cmp</code> to have a custom comparison
function for object keys. Your function <code>opts.cmp</code> is called with these
parameters:</p>

<pre><code class="js">opts.cmp({ key: akey, value: avalue }, { key: bkey, value: bvalue })
</code></pre>

<p>For example, to sort on the object key names in reverse order you could write:</p>

<pre><code class="js">var stringify = require('json-stable-stringify');

var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };
var s = stringify(obj, function (a, b) {
    return a.key &lt; b.key ? 1 : -1;
});
console.log(s);
</code></pre>

<p>which results in the output string:</p>

<pre><code>{"c":8,"b":[{"z":6,"y":5,"x":4},7],"a":3}
</code></pre>

<p>Or if you wanted to sort on the object values in reverse order, you could write:</p>

<pre><code>var stringify = require('json-stable-stringify');

var obj = { d: 6, c: 5, b: [{z:3,y:2,x:1},9], a: 10 };
var s = stringify(obj, function (a, b) {
    return a.value &lt; b.value ? 1 : -1;
});
console.log(s);
</code></pre>

<p>which outputs:</p>

<pre><code>{"d":6,"c":5,"b":[{"z":3,"y":2,"x":1},9],"a":10}
</code></pre>

<h3 id="space">space</h3>

<p>If you specify <code>opts.space</code>, it will indent the output for pretty-printing.
Valid values are strings (e.g. <code>{space: \t}</code>) or a number of spaces
(<code>{space: 3}</code>).</p>

<p>For example:</p>

<pre><code class="js">var obj = { b: 1, a: { foo: 'bar', and: [1, 2, 3] } };
var s = stringify(obj, { space: '  ' });
console.log(s);
</code></pre>

<p>which outputs:</p>

<pre><code>{
  "a": {
    "and": [
      1,
      2,
      3
    ],
    "foo": "bar"
  },
  "b": 1
}
</code></pre>

<h3 id="replacer">replacer</h3>

<p>The replacer parameter is a function <code>opts.replacer(key, value)</code> that behaves
the same as the replacer
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter">from the core JSON object</a>.</p>

<h1 id="install">install</h1>

<p>With <a href="https://npmjs.org">npm</a> do:</p>

<pre><code>npm install json-stable-stringify
</code></pre>

<h1 id="license">license</h1>

<p>MIT</p>
