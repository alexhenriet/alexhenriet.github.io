<h1 id="minimist">minimist</h1>

<p>parse argument options</p>

<p>This module is the guts of optimist's argument parser without all the
fanciful decoration.</p>

<h1 id="example">example</h1>

<pre><code class="js">var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
</code></pre>

<pre><code>$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }
</code></pre>

<pre><code>$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{ _: [ 'foo', 'bar', 'baz' ],
  x: 3,
  y: 4,
  n: 5,
  a: true,
  b: true,
  c: true,
  beep: 'boop' }
</code></pre>

<h1 id="security">security</h1>

<p>Previous versions had a prototype pollution bug that could cause privilege
escalation in some circumstances when handling untrusted user input.</p>

<p>Please use version 1.2.3 or later: https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</p>

<h1 id="methods">methods</h1>

<pre><code class="js">var parseArgs = require('minimist')
</code></pre>

<h2 id="var-argv-%3D-parseargsargs%2C-opts%3D%7B%7D">var argv = parseArgs(args, opts={})</h2>

<p>Return an argument object <code>argv</code> populated with the array arguments from <code>args</code>.</p>

<p><code>argv._</code> contains all the arguments that didn't have an option associated with
them.</p>

<p>Numeric-looking arguments will be returned as numbers unless <code>opts.string</code> or
<code>opts.boolean</code> is set for that argument name.</p>

<p>Any arguments after <code>'--'</code> will not be parsed and will end up in <code>argv._</code>.</p>

<p>options can be:</p>

<ul>
<li><code>opts.string</code> - a string or array of strings argument names to always treat as
strings</li>
<li><code>opts.boolean</code> - a boolean, string or array of strings to always treat as
booleans. if <code>true</code> will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects <code>--foo</code>, not <code>-f</code> or <code>--foo=bar</code>)</li>
<li><code>opts.alias</code> - an object mapping string names to strings or arrays of string
argument names to use as aliases</li>
<li><code>opts.default</code> - an object mapping string argument names to default values</li>
<li><code>opts.stopEarly</code> - when true, populate <code>argv._</code> with everything after the
first non-option</li>
<li><p><code>opts['--']</code> - when true, populate <code>argv._</code> with everything before the <code>--</code>
and <code>argv['--']</code> with everything after the <code>--</code>. Here's an example:</p>

<pre><code>&gt; require('./')('one two three -- four five --six'.split(' '), { '--': true })
{ _: [ 'one', 'two', 'three' ],
'--': [ 'four', 'five', '--six' ] }
</code></pre>

<p>Note that with <code>opts['--']</code> set, parsing for arguments still stops after the
<code>--</code>.</p></li>
<li><p><code>opts.unknown</code> - a function which is invoked with a command line parameter not
defined in the <code>opts</code> configuration object. If the function returns <code>false</code>, the
unknown option is not added to <code>argv</code>.</p></li>
</ul>

<h1 id="install">install</h1>

<p>With <a href="https://npmjs.org">npm</a> do:</p>

<pre><code>npm install minimist
</code></pre>

<h1 id="license">license</h1>

<p>MIT</p>
