<h1 id="require-directory">require-directory</h1>

<p>Recursively iterates over specified directory, <code>require()</code>'ing each file, and returning a nested hash structure containing those modules.</p>

<p><strong><a href="https://twitter.com/intent/user?screen_name=troygoode">Follow me (@troygoode) on Twitter!</a></strong></p>

<p><a href="https://nodei.co/npm/require-directory/"><img src="https://nodei.co/npm/require-directory.png?downloads=true&amp;stars=true" alt="NPM" /></a></p>

<p><a href="http://travis-ci.org/troygoode/node-require-directory"><img src="https://secure.travis-ci.org/troygoode/node-require-directory.png" alt="build status" /></a></p>

<h2 id="how-to-use">How To Use</h2>

<h3 id="installation-via-npm">Installation (via <a href="https://npmjs.org/package/require-directory">npm</a>)</h3>

<pre><code class="bash">$ npm install require-directory
</code></pre>

<h3 id="usage">Usage</h3>

<p>A common pattern in node.js is to include an index file which creates a hash of the files in its current directory. Given a directory structure like so:</p>

<ul>
<li>app.js</li>
<li>routes/

<ul>
<li>index.js</li>
<li>home.js</li>
<li>auth/</li>
<li>login.js</li>
<li>logout.js</li>
<li>register.js</li>
</ul></li>
</ul>

<p><code>routes/index.js</code> uses <code>require-directory</code> to build the hash (rather than doing so manually) like so:</p>

<pre><code class="javascript">var requireDirectory = require('require-directory');
module.exports = requireDirectory(module);
</code></pre>

<p><code>app.js</code> references <code>routes/index.js</code> like any other module, but it now has a hash/tree of the exports from the <code>./routes/</code> directory:</p>

<pre><code class="javascript">var routes = require('./routes');

// snip

app.get('/', routes.home);
app.get('/register', routes.auth.register);
app.get('/login', routes.auth.login);
app.get('/logout', routes.auth.logout);
</code></pre>

<p>The <code>routes</code> variable above is the equivalent of this:</p>

<pre><code class="javascript">var routes = {
  home: require('routes/home.js'),
  auth: {
    login: require('routes/auth/login.js'),
    logout: require('routes/auth/logout.js'),
    register: require('routes/auth/register.js')
  }
};
</code></pre>

<p><em>Note that <code>routes.index</code> will be <code>undefined</code> as you would hope.</em></p>

<h3 id="specifying-another-directory">Specifying Another Directory</h3>

<p>You can specify which directory you want to build a tree of (if it isn't the current directory for whatever reason) by passing it as the second parameter. Not specifying the path (<code>requireDirectory(module)</code>) is the equivelant of <code>requireDirectory(module, __dirname)</code>:</p>

<pre><code class="javascript">var requireDirectory = require('require-directory');
module.exports = requireDirectory(module, './some/subdirectory');
</code></pre>

<p>For example, in the <a href="#usage">example in the Usage section</a> we could have avoided creating <code>routes/index.js</code> and instead changed the first lines of <code>app.js</code> to:</p>

<pre><code class="javascript">var requireDirectory = require('require-directory');
var routes = requireDirectory(module, './routes');
</code></pre>

<h2 id="options">Options</h2>

<p>You can pass an options hash to <code>require-directory</code> as the 2nd parameter (or 3rd if you're passing the path to another directory as the 2nd parameter already). Here are the available options:</p>

<h3 id="whitelisting">Whitelisting</h3>

<p>Whitelisting (either via RegExp or function) allows you to specify that only certain files be loaded.</p>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  whitelist = /onlyinclude.js$/,
  hash = requireDirectory(module, {include: whitelist});
</code></pre>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  check = function(path){
    if(/onlyinclude.js$/.test(path)){
      return true; // don't include
    }else{
      return false; // go ahead and include
    }
  },
  hash = requireDirectory(module, {include: check});
</code></pre>

<h3 id="blacklisting">Blacklisting</h3>

<p>Blacklisting (either via RegExp or function) allows you to specify that all but certain files should be loaded.</p>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  blacklist = /dontinclude\.js$/,
  hash = requireDirectory(module, {exclude: blacklist});
</code></pre>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  check = function(path){
    if(/dontinclude\.js$/.test(path)){
      return false; // don't include
    }else{
      return true; // go ahead and include
    }
  },
  hash = requireDirectory(module, {exclude: check});
</code></pre>

<h3 id="visiting-objects-as-they%27re-loaded">Visiting Objects As They're Loaded</h3>

<p><code>require-directory</code> takes a function as the <code>visit</code> option that will be called for each module that is added to module.exports.</p>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  visitor = function(obj) {
    console.log(obj); // will be called for every module that is loaded
  },
  hash = requireDirectory(module, {visit: visitor});
</code></pre>

<p>The visitor can also transform the objects by returning a value:</p>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  visitor = function(obj) {
    return obj(new Date());
  },
  hash = requireDirectory(module, {visit: visitor});
</code></pre>

<h3 id="renaming-keys">Renaming Keys</h3>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  renamer = function(name) {
    return name.toUpperCase();
  },
  hash = requireDirectory(module, {rename: renamer});
</code></pre>

<h3 id="no-recursion">No Recursion</h3>

<pre><code class="javascript">var requireDirectory = require('require-directory'),
  hash = requireDirectory(module, {recurse: false});
</code></pre>

<h2 id="run-unit-tests">Run Unit Tests</h2>

<pre><code class="bash">$ npm run lint
$ npm test
</code></pre>

<h2 id="license">License</h2>

<p><a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a></p>

<h2 id="author">Author</h2>

<p><a href="https://github.com/TroyGoode">Troy Goode</a> (<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x74;&#114;&#x6f;&#121;&#x67;&#111;&#x6f;&#100;&#101;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">troygoode@gmail.com</a>)</p>
