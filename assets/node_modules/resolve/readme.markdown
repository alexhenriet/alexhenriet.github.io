<h1 id="resolve-%21version-badge21">resolve <sup><a href="https://npmjs.org/package/resolve"><img src="https://versionbadg.es/browserify/resolve.svg" alt="Version Badge" /></a></sup></h1>

<p>implements the <a href="https://nodejs.org/api/modules.html#modules_all_together">node <code>require.resolve()</code> algorithm</a> such that you can <code>require.resolve()</code> on behalf of a file asynchronously and synchronously</p>

<p><a href="https://github.com/browserify/resolve/actions"><img src="https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/browserify/resolve" alt="github actions" /></a>
<a href="https://app.codecov.io/gh/browserify/resolve/"><img src="https://codecov.io/gh/browserify/resolve/branch/main/graphs/badge.svg" alt="coverage" /></a>
<a href="https://david-dm.org/browserify/resolve"><img src="https://david-dm.org/browserify/resolve.svg" alt="dependency status" /></a>
<a href="https://david-dm.org/browserify/resolve#info=devDependencies"><img src="https://david-dm.org/browserify/resolve/dev-status.svg" alt="dev dependency status" /></a>
<a href="LICENSE"><img src="https://img.shields.io/npm/l/resolve.svg" alt="License" /></a>
<a href="https://npm-stat.com/charts.html?package=resolve"><img src="https://img.shields.io/npm/dm/resolve.svg" alt="Downloads" /></a></p>

<p><a href="https://npmjs.org/package/resolve"><img src="https://nodei.co/npm/resolve.png?downloads=true&amp;stars=true" alt="npm badge" /></a></p>

<h1 id="example">example</h1>

<p>asynchronously resolve:</p>

<pre><code class="js">var resolve = require('resolve/async'); // or, require('resolve')
resolve('tap', { basedir: __dirname }, function (err, res) {
    if (err) console.error(err);
    else console.log(res);
});
</code></pre>

<pre><code>$ node example/async.js
/home/substack/projects/node-resolve/node_modules/tap/lib/main.js
</code></pre>

<p>synchronously resolve:</p>

<pre><code class="js">var resolve = require('resolve/sync'); // or, `require('resolve').sync
var res = resolve('tap', { basedir: __dirname });
console.log(res);
</code></pre>

<pre><code>$ node example/sync.js
/home/substack/projects/node-resolve/node_modules/tap/lib/main.js
</code></pre>

<h1 id="methods">methods</h1>

<pre><code class="js">var resolve = require('resolve');
var async = require('resolve/async');
var sync = require('resolve/sync');
</code></pre>

<p>For both the synchronous and asynchronous methods, errors may have any of the following <code>err.code</code> values:</p>

<ul>
<li><code>MODULE_NOT_FOUND</code>: the given path string (<code>id</code>) could not be resolved to a module</li>
<li><code>INVALID_BASEDIR</code>: the specified <code>opts.basedir</code> doesn't exist, or is not a directory</li>
<li><code>INVALID_PACKAGE_MAIN</code>: a <code>package.json</code> was encountered with an invalid <code>main</code> property (eg. not a string)</li>
</ul>

<h2 id="resolveid%2C-opts%3D%7B%7D%2C-cb">resolve(id, opts={}, cb)</h2>

<p>Asynchronously resolve the module path string <code>id</code> into <code>cb(err, res [, pkg])</code>, where <code>pkg</code> (if defined) is the data from <code>package.json</code>.</p>

<p>options are:</p>

<ul>
<li><p>opts.basedir - directory to begin resolving from</p></li>
<li><p>opts.package - <code>package.json</code> data applicable to the module being loaded</p></li>
<li><p>opts.extensions - array of file extensions to search in order</p></li>
<li><p>opts.includeCoreModules - set to <code>false</code> to exclude node core modules (e.g. <code>fs</code>) from the search</p></li>
<li><p>opts.readFile - how to read files asynchronously</p></li>
<li><p>opts.isFile - function to asynchronously test whether a file exists</p></li>
<li><p>opts.isDirectory - function to asynchronously test whether a file exists and is a directory</p></li>
<li><p>opts.realpath - function to asynchronously resolve a potential symlink to its real path</p></li>
<li><p><code>opts.readPackage(readFile, pkgfile, cb)</code> - function to asynchronously read and parse a package.json file</p>

<ul>
<li>readFile - the passed <code>opts.readFile</code> or <code>fs.readFile</code> if not specified</li>
<li>pkgfile - path to package.json</li>
<li>cb - callback</li>
</ul></li>
<li><p><code>opts.packageFilter(pkg, pkgfile, dir)</code> - transform the parsed package.json contents before looking at the "main" field</p>

<ul>
<li>pkg - package data</li>
<li>pkgfile - path to package.json</li>
<li>dir - directory that contains package.json</li>
</ul></li>
<li><p><code>opts.pathFilter(pkg, path, relativePath)</code> - transform a path within a package</p>

<ul>
<li>pkg - package data</li>
<li>path - the path being resolved</li>
<li>relativePath - the path relative from the package.json location</li>
<li>returns - a relative path that will be joined from the package.json location</li>
</ul></li>
<li><p>opts.paths - require.paths array to use if nothing is found on the normal <code>node_modules</code> recursive walk (probably don't use this)</p>

<p>For advanced users, <code>paths</code> can also be a <code>opts.paths(request, start, opts)</code> function</p>

<ul>
<li>request - the import specifier being resolved</li>
<li>start - lookup path</li>
<li>getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard <code>node_modules</code> resolution</li>
<li>opts - the resolution options</li>
</ul></li>
<li><p><code>opts.packageIterator(request, start, opts)</code> - return the list of candidate paths where the packages sources may be found (probably don't use this)</p>

<ul>
<li>request - the import specifier being resolved</li>
<li>start - lookup path</li>
<li>getPackageCandidates - a thunk (no-argument function) that returns the paths using standard <code>node_modules</code> resolution</li>
<li>opts - the resolution options</li>
</ul></li>
<li><p>opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: <code>"node_modules"</code></p></li>
<li><p>opts.preserveSymlinks - if true, doesn't resolve <code>basedir</code> to real path before resolving.
This is the way Node resolves dependencies when executed with the <a href="https://nodejs.org/api/all.html#cli_preserve_symlinks">--preserve-symlinks</a> flag.
<strong>Note:</strong> this property is currently <code>true</code> by default but it will be changed to
<code>false</code> in the next major version because <em>Node's resolution algorithm does not preserve symlinks by default</em>.</p></li>
</ul>

<p>default <code>opts</code> values:</p>

<pre><code class="js">{
    paths: [],
    basedir: __dirname,
    extensions: ['.js'],
    includeCoreModules: true,
    readFile: fs.readFile,
    isFile: function isFile(file, cb) {
        fs.stat(file, function (err, stat) {
            if (!err) {
                return cb(null, stat.isFile() || stat.isFIFO());
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
            return cb(err);
        });
    },
    isDirectory: function isDirectory(dir, cb) {
        fs.stat(dir, function (err, stat) {
            if (!err) {
                return cb(null, stat.isDirectory());
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
            return cb(err);
        });
    },
    realpath: function realpath(file, cb) {
        var realpath = typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;
        realpath(file, function (realPathErr, realPath) {
            if (realPathErr &amp;&amp; realPathErr.code !== 'ENOENT') cb(realPathErr);
            else cb(null, realPathErr ? file : realPath);
        });
    },
    readPackage: function defaultReadPackage(readFile, pkgfile, cb) {
        readFile(pkgfile, function (readFileErr, body) {
            if (readFileErr) cb(readFileErr);
            else {
                try {
                    var pkg = JSON.parse(body);
                    cb(null, pkg);
                } catch (jsonErr) {
                    cb(null);
                }
            }
        });
    },
    moduleDirectory: 'node_modules',
    preserveSymlinks: true
}
</code></pre>

<h2 id="resolve.syncid%2C-opts">resolve.sync(id, opts)</h2>

<p>Synchronously resolve the module path string <code>id</code>, returning the result and
throwing an error when <code>id</code> can't be resolved.</p>

<p>options are:</p>

<ul>
<li><p>opts.basedir - directory to begin resolving from</p></li>
<li><p>opts.extensions - array of file extensions to search in order</p></li>
<li><p>opts.includeCoreModules - set to <code>false</code> to exclude node core modules (e.g. <code>fs</code>) from the search</p></li>
<li><p>opts.readFileSync - how to read files synchronously</p></li>
<li><p>opts.isFile - function to synchronously test whether a file exists</p></li>
<li><p>opts.isDirectory - function to synchronously test whether a file exists and is a directory</p></li>
<li><p>opts.realpathSync - function to synchronously resolve a potential symlink to its real path</p></li>
<li><p><code>opts.readPackageSync(readFileSync, pkgfile)</code> - function to synchronously read and parse a package.json file</p>

<ul>
<li>readFileSync - the passed <code>opts.readFileSync</code> or <code>fs.readFileSync</code> if not specified</li>
<li>pkgfile - path to package.json</li>
</ul></li>
<li><p><code>opts.packageFilter(pkg, dir)</code> - transform the parsed package.json contents before looking at the "main" field</p>

<ul>
<li>pkg - package data</li>
<li>dir - directory that contains package.json (Note: the second argument will change to "pkgfile" in v2)</li>
</ul></li>
<li><p><code>opts.pathFilter(pkg, path, relativePath)</code> - transform a path within a package</p>

<ul>
<li>pkg - package data</li>
<li>path - the path being resolved</li>
<li>relativePath - the path relative from the package.json location</li>
<li>returns - a relative path that will be joined from the package.json location</li>
</ul></li>
<li><p>opts.paths - require.paths array to use if nothing is found on the normal <code>node_modules</code> recursive walk (probably don't use this)</p>

<p>For advanced users, <code>paths</code> can also be a <code>opts.paths(request, start, opts)</code> function</p>

<ul>
<li>request - the import specifier being resolved</li>
<li>start - lookup path</li>
<li>getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard <code>node_modules</code> resolution</li>
<li>opts - the resolution options</li>
</ul></li>
<li><p><code>opts.packageIterator(request, start, opts)</code> - return the list of candidate paths where the packages sources may be found (probably don't use this)</p>

<ul>
<li>request - the import specifier being resolved</li>
<li>start - lookup path</li>
<li>getPackageCandidates - a thunk (no-argument function) that returns the paths using standard <code>node_modules</code> resolution</li>
<li>opts - the resolution options</li>
</ul></li>
<li><p>opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: <code>"node_modules"</code></p></li>
<li><p>opts.preserveSymlinks - if true, doesn't resolve <code>basedir</code> to real path before resolving.
This is the way Node resolves dependencies when executed with the <a href="https://nodejs.org/api/all.html#cli_preserve_symlinks">--preserve-symlinks</a> flag.
<strong>Note:</strong> this property is currently <code>true</code> by default but it will be changed to
<code>false</code> in the next major version because <em>Node's resolution algorithm does not preserve symlinks by default</em>.</p></li>
</ul>

<p>default <code>opts</code> values:</p>

<pre><code class="js">{
    paths: [],
    basedir: __dirname,
    extensions: ['.js'],
    includeCoreModules: true,
    readFileSync: fs.readFileSync,
    isFile: function isFile(file) {
        try {
            var stat = fs.statSync(file);
        } catch (e) {
            if (e &amp;&amp; (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
            throw e;
        }
        return stat.isFile() || stat.isFIFO();
    },
    isDirectory: function isDirectory(dir) {
        try {
            var stat = fs.statSync(dir);
        } catch (e) {
            if (e &amp;&amp; (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
            throw e;
        }
        return stat.isDirectory();
    },
    realpathSync: function realpathSync(file) {
        try {
            var realpath = typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;
            return realpath(file);
        } catch (realPathErr) {
            if (realPathErr.code !== 'ENOENT') {
                throw realPathErr;
            }
        }
        return file;
    },
    readPackageSync: function defaultReadPackageSync(readFileSync, pkgfile) {
        var body = readFileSync(pkgfile);
        try {
            var pkg = JSON.parse(body);
            return pkg;
        } catch (jsonErr) {}
    },
    moduleDirectory: 'node_modules',
    preserveSymlinks: true
}
</code></pre>

<h1 id="install">install</h1>

<p>With <a href="https://npmjs.org">npm</a> do:</p>

<pre><code class="sh">npm install resolve
</code></pre>

<h1 id="license">license</h1>

<p>MIT</p>
